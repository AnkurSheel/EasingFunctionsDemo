//  *******************************************************************************************************************
//  FileIO   version:  1.0   Ankur Sheel  date: 2014/10/30
//  *******************************************************************************************************************
//
//  *******************************************************************************************************************
#ifndef __FILEIO_HXX__
#define __FILEIO_HXX__

#include "BaseDefines.h"

namespace Base
{
  class cFileIO
  {
  public:
    BASE_API ~cFileIO();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Opens the file for IO
    ///
    /// @param[in] fileName The name of the file to be opened.
    /// @param[in] mode The mode that the file should be opened in.
    /// @return True if the file was successfully opened. False otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API bool OpenFile(const cString& fileName, const std::ios_base::openmode mode);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Closes the file.
    ///
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API void CloseFile();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Writes the text to the file.
    ///
    /// @param[in] text The text that has to be written
    /// @return True if the text was successfully written. False otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API bool WriteLine(const cString& text);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Writes the buffer to the file.
    ///
    /// @param[in] pBuffer Pointer to the block of data to write of n characters
    /// @param[in] size The number characters to insert
    /// @return True if buffer was successfully written. False otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API bool Write(const char* pBuffer, uint64 size);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Copies a maximum of size bytes into pBuffer. Should not be used for ascii files unless you know what you are
    /// doing.
    ///
    /// @param[out] pBuffer The contents of the file
    /// @param[in] size the size of the buffer.
    /// @return True if file was successfully read. False otherwise.
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API bool Read(char* const pBuffer, uint64 size);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Writes the text to the file.
    ///
    /// @return The line of text that was read.
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API cString ReadLine();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Flushes the stream.
    ///
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API void Flush();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Returns the file name.
    ///
    /// @return The file name.
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API const cString& GetFileName();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Returns True if we have reached the End of File. False Otherwise
    ///
    /// @return True if we have reached the End of File. False Otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API bool IsEOF() const;
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Returns the file size.
    ///
    /// @return The file size.
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API uint64 GetFileSize() const;
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Returns input position indicator.
    ///
    /// @return The current position of the get pointer on success, -1 on failure.
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API uint32 GetCurrentInputPosition();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets input position indicator.
    ///
    /// @param[in] relativePosition Relative position to set the input position indicator to.
    /// @param[in] dir Defines base position to apply the relative offset to.
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API void SetCurrentInputPosition(const int relativePosition, std::ios_base::seekdir dir);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Creates and returns an object of cFileIO.
    ///
    /// @return An object of cFileIO.
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BASE_API static std::unique_ptr<cFileIO> CreateFileIO();

  private:
    cFileIO();

  private:
    class cFileIOImpl;
    std::unique_ptr<cFileIOImpl> m_pImpl;
  };
}  // namespace Base
#endif  // __FILEIO_HXX__
