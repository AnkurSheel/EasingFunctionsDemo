//  *******************************************************************************************************************
//  GraphicsClass   version:  1.0   Ankur Sheel  date: 2012/09/13
//  *******************************************************************************************************************
//
//  *******************************************************************************************************************
#ifndef GRAPHICSCLASS_H__
#define GRAPHICSCLASS_H__

#include "GraphicEngineDefines.h"

namespace Graphics
{
  struct stInitializationParameters;
}

namespace Graphics
{
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Interface to encapsulate all the graphics functionality
  ///
  /// Singleton class.\n
  /// Usage :
  /// \li Call \c GetInstance() to use this class.
  /// \li Call \c VOnDestroy() when the application quits
  ///
  ///
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  class cGraphics : public Base::cNonCopyable
  {
  public:
    cGraphics();
    ~cGraphics();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Creates the DirectX object and Initializes the DirectX system.
    ///
    /// @param[in] params Initialization Parameters
    /// @return True if Successful. False otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GRAPHIC_API bool Initialize(const stInitializationParameters& params);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Begins the rendering and clears the surface
    ///
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GRAPHIC_API void BeginRender();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Ends the rendering and presents the contents
    ///
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GRAPHIC_API void EndRender();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Callback for when the window is resized
    ///
    /// @param[in] width The new width of the window
    /// @param[in] height The new height of the window
    /// @return True if we are in full screen mode. False otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GRAPHIC_API Base::tOptional<bool> OnWindowResized(int width, int height);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets the full screen/windowed mode for the DirectX engine
    ///
    /// @param[in] isFullScreen True if fullscreen. False otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GRAPHIC_API void SetFullScreenMode(bool isFullScreen);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Creates and returns a pointer to a singleton object of this interface
    ///
    /// @return Returns a pointer to the singleton object
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GRAPHIC_API static const std::unique_ptr<cGraphics>& Instance();
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Deletes the singleton object
    ///
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GRAPHIC_API static void Destroy();

  private:
    static std::unique_ptr<cGraphics> s_pGraphic;  ///< static object of this class

    class cGraphicsImpl;
    std::unique_ptr<cGraphicsImpl> m_pImpl;
  };
}  // namespace Graphics
#endif  // GRAPHICSCLASS_H__
